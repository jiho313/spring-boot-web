<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.jhta.mapper.EmployeeDao">
	
<!-- 	<resultMap type="kr.co.jhta.vo.Employee" id="EmployeeResultMap">
		<id property="id" column="employee_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="email" column="email" />
		<result property="hireDate" column="hire_date" />
		<result property="salary" column="salary" />
		<result property="commissionPct" column="commissionPct" />
		<association property="job" 
					 select="kr.co.jhta.hr.mapper.JobMapper.getJobById" 
					 column="JOB_ID"/>
		<association property="manager" 
					 select="getEmployeeById" 
					 column="MANAGER_ID"/>
		<association property="department" 
					 select="kr.co.jhta.hr.mapper.DepartmentMapper.getDepartmentById" 
					 column="DEPARTMENT_ID"/>
	</resultMap> -->
	<!-- <select id="getEmployeesByJobId" parameterType="string" resultMap="EmployeeResultMap"> -->
	
	<select id="getEmployeesByJobId" parameterType="string" resultType="kr.co.jhta.vo.Employee">
		select a.employee_id		as id,
			   a.first_name			as firstName,
			   a.last_name			as lastName,
			   a.hire_date			as hireDate,
			   b.department_name	as "department.name",
			   a.salary
		from employees a, departments b
		where a.department_id = b.department_id(+)
		and a.job_id = #{value}
		order by a.employee_id
	</select>
	
	<select id="getEmployeesByDeptId" parameterType="int" resultType="kr.co.jhta.vo.Employee">
		select a.employee_id		as id,
			   a.first_name			as firstName,
			   a.last_name			as lastName,
			   a.hire_date			as hireDate,
			   b.department_name	as "department.name",
			   a.salary
		from employees a, departments b
		where a.department_id = b.department_id(+)
		and a.department_id = #{value}
		order by a.employee_id
	</select>
	
	<insert id="insertEmployee" parameterType="kr.co.jhta.vo.Employee">
		insert into employees
		(employee_id, first_name, last_name, email, phone_number, hire_date, job_id,
		 salary, commission_pct, manager_id, department_id)
		values
		(employees_seq.nextval, #{firstName}, #{lastName}, #{email}, #{phoneNumber}, #{hireDate},
		 #{job.id}, #{salary}, #{commissionPct}, #{manager.id}, #{department.id})
	</insert>
	
	   <select id="getTotalRows" parameterType="map" resultType="int">
      select count(*)
      from employees
      <where>
         <choose>
         	<!-- Y한 글자는 캐릭터라고 인식할 수 도 있기 때문에 'xxx == "Y"' -->
            <when test="opt == 'name'">
               (first_name =  INITCAP(#{keyword}) or last_name =  INITCAP(#{keyword}))
            </when>
            <when test="opt == 'job'">
               job_id = UPPER(#{keyword})
            </when>
            <when test="opt == 'phone'">
               phone_number = #{keyword}
            </when>
            <when test="opt == 'dept'">
               department_id in (select department_id
                                 from departments
                                 where department_name = INITCAP(#{keyword})
            </when>
         </choose>
      </where>
   </select>
   
   <select id="getEmployees" parameterType="map" resultType="kr.co.jhta.vo.Employee">
      select
         *
      from (
         select
            A.employee_id      as id,
            A.first_name      as firstName,
            A.last_name         as lastName,
            A.phone_number      as phoneNumber,
            A.hire_date         as hireDate,
            A.job_id         as "job.id",
            A.department_id      as "department.id",
            B.department_name   as "department.name",
     	<choose>
            	<when test="sort == 'id'">
                  row_number() over (order by A.employee_id asc) rownumber
               </when>
               <when test="sort == 'name'">
                  row_number() over (order by A.first_name asc) rownumber
               </when>
               <when test="sort == 'date'">
                  row_number() over (order by A.hire_date asc) rownumber
               </when>
               <when test="sort == 'job'">
                  row_number() over (order by A.job_id asc) rownumber
               </when>
               <when test="sort == 'dept'">
                  row_number() over (order by B.department_name asc) rownumber
               </when>
            </choose>
         from employees A, departments B
         where A.department_id = B.department_id(+)
         <choose>
            <when test="opt == 'name'">
               and (A.first_name =  INITCAP(#{keyword}) or A.last_name =  INITCAP(#{keyword}))
            </when>
            <when test="opt == 'job'">
               and A.job_id = UPPER(#{keyword})
            </when>
            <when test="opt == 'phone'">
               and A.phone_number = #{keyword}
            </when>
            <when test="opt == 'dept'">
               and A.department_id in (select department_id
                                       from departments
                                       where department_name = INITCAP(#{keyword})
            </when>
         </choose>
      )
      where
         rownumber between #{begin} and #{end}
   </select>
</mapper>

